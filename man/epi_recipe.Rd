% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/epi_recipe.R
\name{epi_recipe}
\alias{epi_recipe}
\alias{epi_recipe.default}
\alias{epi_recipe.formula}
\alias{epi_recipe.epi_df}
\title{Create a epi_recipe for preprocessing data}
\usage{
epi_recipe(x, ...)

\method{epi_recipe}{default}(x, ...)

\method{epi_recipe}{epi_df}(x, formula = NULL, ..., vars = NULL, roles = NULL)

\method{epi_recipe}{formula}(formula, data, ...)
}
\arguments{
\item{x, data}{A data frame, tibble, or epi_df of the \emph{template} data set
(see below). This is always coerced to the first row to avoid memory issues}

\item{...}{Further arguments passed to or from other methods (not currently
used).}

\item{formula}{A model formula. No in-line functions should be used here
(e.g. \code{log(x)}, \code{x:y}, etc.) and minus signs are not allowed. These types of
transformations should be enacted using \code{step} functions in this package.
Dots are allowed as are simple multivariate outcome terms (i.e. no need for
\code{cbind}; see Examples).}

\item{vars}{A character string of column names corresponding to variables
that will be used in any context (see below)}

\item{roles}{A character string (the same length of \code{vars}) that
describes a single role that the variable will take. This value could be
anything but common roles are \code{"outcome"}, \code{"predictor"},
\code{"time_value"}, and \code{"geo_value"}}
}
\value{
An object of class \code{recipe} with sub-objects:
\item{var_info}{A tibble containing information about the original data
set columns}
\item{term_info}{A tibble that contains the current set of terms in the
data set. This initially defaults to the same data contained in
\code{var_info}.}
\item{steps}{A list of \code{step}  or \code{check} objects that define the sequence of
preprocessing operations that will be applied to data. The default value is
\code{NULL}}
\item{template}{A tibble of the data. This is initialized to be the same
as the data given in the \code{data} argument but can be different after
the recipe is trained.}
}
\description{
A recipe is a description of the steps to be applied to a data set in
order to prepare it for data analysis. This is a loose wrapper
around \code{\link[recipes:recipe]{recipes::recipe()}} to properly handle the additional
columns present in an \code{epi_df}
}
\examples{
library(epiprocess)
library(dplyr)
library(recipes)

jhu <- jhu_csse_daily_subset \%>\%
  filter(time_value > "2021-08-01") \%>\%
  select(geo_value:death_rate_7d_av) \%>\%
  rename(case_rate = case_rate_7d_av, death_rate = death_rate_7d_av)

r <- epi_recipe(jhu) \%>\%
  step_epi_lag(death_rate, lag = c(0, 7, 14)) \%>\%
  step_epi_ahead(death_rate, ahead = 7) \%>\%
  step_epi_lag(case_rate, lag = c(0, 7, 14)) \%>\%
  step_naomit(all_predictors()) \%>\%
  # below, `skip` means we don't do this at predict time
  step_naomit(all_outcomes(), skip = TRUE)

r
}
